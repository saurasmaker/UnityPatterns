using System.Diagnostics;
using UnityEngine;

namespace Patterns.Singletons
{
    /// <summary>
    /// Generic Singleton class for non-MonoBehaviour objects.
    /// Provides a single instance of the class <typeparamref name="T"/>.
    /// </summary>
    /// <typeparam name="T">Type of the Singleton class.</typeparam>
    public class Singleton<T> where T : class, new()
    {
        /// <summary>
        /// Static instance of the Singleton.
        /// </summary>
        private static readonly T _instance = new T();

        /// <summary>
        /// Provides access to the Singleton instance.
        /// </summary>
        public static T Instance => _instance;
    }

    /// <summary>
    /// Abstract Singleton class for MonoBehaviour-based objects.
    /// This ensures only one instance of <typeparamref name="T"/> exists in the scene.
    /// </summary>
    /// <typeparam name="T">Type of the Singleton MonoBehaviour.</typeparam>
    public abstract class SingletonMonoBehaviour<T> : MonoBehaviour where T : SingletonMonoBehaviour<T>
    {
        /// <summary>
        /// The Singleton instance of type <typeparamref name="T"/>.
        /// </summary>
        private static T _instance;

        /// <summary>
        /// Provides access to the Singleton instance. Returns null if not instantiated.
        /// </summary>
        public static T Instance => _instance;

        /// <summary>
        /// Automatically generates a Singleton instance if none exists.
        /// </summary>
        public static T InstanceAutogenerated
        {
            get
            {
                if (_instance == null)
                {
                    UnityEngine.Debug.LogWarning($"{typeof(T)} is missing. {typeof(T)} autogenerated.");
                    GameObject singletonGO = new GameObject(typeof(T).ToString());
                    singletonGO.AddComponent<T>();
                }
                return _instance;
            }
        }

        /// <summary>
        /// Unity Awake method. Initializes the Singleton instance.
        /// </summary>
        private void Awake()
        {
            if (_instance != null)
            {
                UnityEngine.Debug.LogWarning($"Another SingletonMonoBehaviour of type {typeof(T)} exists in the scene. Self-destroy triggered.");
                Destroy(this.gameObject);
                return;
            }

            _instance = this as T;
            OnAwake();
        }

        /// <summary>
        /// Override this method for custom Awake behavior.
        /// </summary>
        protected virtual void OnAwake() { }

        /// <summary>
        /// Unity Start method. Calls the custom OnStart method.
        /// </summary>
        private void Start()
        {
            OnStart();
        }

        /// <summary>
        /// Override this method for custom Start behavior.
        /// </summary>
        protected virtual void OnStart() { }
    }

    /// <summary>
    /// Abstract Singleton class for MonoBehaviour-based objects that persist across scenes.
    /// Ensures a single instance of <typeparamref name="T"/> exists and is not destroyed on scene load.
    /// </summary>
    /// <typeparam name="T">Type of the Singleton MonoBehaviour.</typeparam>
    public abstract class SingletonPersistent<T> : MonoBehaviour where T : SingletonPersistent<T>
    {
        /// <summary>
        /// The Singleton instance of type <typeparamref name="T"/>.
        /// </summary>
        private static T _instance;

        /// <summary>
        /// Provides access to the Singleton instance. Returns null if not instantiated.
        /// </summary>
        public static T Instance => _instance;

        /// <summary>
        /// Automatically generates a Singleton instance if none exists.
        /// </summary>
        public static T InstanceAutogenerated
        {
            get
            {
                if (_instance == null)
                {
                    UnityEngine.Debug.LogWarning($"{typeof(T)} is missing. {typeof(T)} autogenerated.");
                    GameObject singletonGO = new GameObject(typeof(T).ToString());
                    singletonGO.AddComponent<T>();
                }
                return _instance;
            }
        }

        /// <summary>
        /// Unity Awake method. Initializes the Singleton instance and ensures persistence across scenes.
        /// </summary>
        private void Awake()
        {
            if (_instance != null)
            {
                UnityEngine.Debug.LogWarning($"Another SingletonPersistent of type {typeof(T)} exists in the scene. Self-destroy triggered.");
                Destroy(this.gameObject);
                return;
            }

            _instance = this as T;

            if (transform.parent != null)
                transform.parent = null;

            DontDestroyOnLoad(this.gameObject);
            OnAwake();
        }

        /// <summary>
        /// Override this method for custom Awake behavior.
        /// </summary>
        protected virtual void OnAwake() { }

        /// <summary>
        /// Unity Start method. Calls the custom OnStart method.
        /// </summary>
        private void Start()
        {
            OnStart();
        }

        /// <summary>
        /// Override this method for custom Start behavior.
        /// </summary>
        protected virtual void OnStart() { }
    }
}
