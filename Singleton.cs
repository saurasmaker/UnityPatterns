using UnityEngine;

namespace Patterns.Singletons
{
    /*
     * 
     */
    public class Singleton<T> where T : class, new()
    {
        private static readonly T _instance = new T();
        public static T Instance { get { return _instance; } }
    }


    /*
     * Do not use 'Awake()' or 'Start()' functions of MonoBehaviour in scripts that inheritances from 
     * SingletonMonoBehaviour pattern. Instead, use the inherited method OnAwake to ensure the correct
     * operation of the script.
     */
    public abstract class SingletonMonoBehaviour<T> : MonoBehaviour where T : SingletonMonoBehaviour<T>
    {
        private static T _instance;
        public static T Instance
        {
            get
            {
                if (_instance == null)
                {
                    Debug.LogWarning(typeof(T).ToString() + " is missing. " + typeof(T).ToString() + " autogenerated.");
                    GameObject _debuggerGO = new GameObject(typeof(T).ToString());
                    _debuggerGO.AddComponent<T>();
                }
                return _instance;
            }
        }

        /*
         * It makes no difference to use the 'base.OnAwake()' call if the class 
         * inherits directly from SingletonMonoBehaviour.
         */
        private void Awake()
        {
            if (_instance != null)
            {
                Debug.LogWarning("There is another SingletonMonoBehaviour of type " + typeof(T).ToString() +
                    " in this Scene. Automatic self-destruct triggered.");

                Destroy(this.gameObject);
            }
            _instance = this as T;

            OnAwake();
        }
        protected virtual void OnAwake() { }


        /*
         * It makes no difference to use the 'base.OnStart()' call if the class 
         * inherits directly from SingletonMonoBehaviour.
         */
        private void Start()
        {
            OnStart();
        }
        protected virtual void OnStart() { }
    }


    /*
     * Do not use 'Awake()' or 'Start()' functions of MonoBehaviour in scripts that inheritances from 
     * SingletonPersistent pattern. Instead, use the inherited method OnAwake to ensure the correct
     * operation of the script.
     */
    public abstract class SingletonPersistent<T> : MonoBehaviour where T : SingletonPersistent<T>
    {
        private static T _instance;
        public static T Instance
        {
            get
            {
                if (_instance == null)
                {
                    Debug.LogWarning(typeof(T).ToString() + " is missing. " + typeof(T).ToString() + " autogenerated.");
                    GameObject go = new GameObject(typeof(T).ToString());
                    go.AddComponent<T>();
                }

                return _instance;
            }
        }


        // [SerializeField] //uncomment if necessary
        // private bool _initializeEnabled = false; //uncomment if necessary
        private bool _initializationEnds = false;
        // public bool InitializeEnabled { get { return _initializeEnabled; } } //uncomment if necessary
        public bool InitializationEnds { get { return _initializationEnds; } }

        private void Awake()
        {
            if (_instance != null)
            {
                UnityEngine.Debug.LogWarning("There is another SingletonMonoBehaviour of type " + typeof(T).ToString() +
                    " in this Scene. Automatic self-destruct triggered.");

                Destroy(this.gameObject);
            }
            _instance = this as T;
            if (transform.parent != null)
                transform.parent = null;

            DontDestroyOnLoad(this.gameObject);

            // gameObject.SetActive(_startsEnabled); //uncomment if necessary
            OnAwake();
        }
        protected virtual void OnAwake() { }

        private void Start()
        {
            OnStart();
            _initializationEnds = true;
        }
        protected virtual void OnStart() { }
    }
}


